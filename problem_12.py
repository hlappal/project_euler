"""
The sequence of triangular numbers is generated by adding the natural
numbers. So the 7th triangle number would be 1 + 3 + 3 + 4 + 5 + 7 = 28.
The first ten terms would be:

    1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1, 3
     6: 1, 2, 3, 6
    10: 1, 2, 5, 10
    15: 1, 3, 5, 15
    21: 1, 3, 7, 21
    28: 1, 2, 4, 7, 14, 28

We can see that 28 is the triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
"""


def get_divisors(num):
    if num == 1:
        return 1
    divisors = [1, num]
    for i in range(2, num):
        if num % i == 0:
            divisors.append(i)
    return len(divisors)

def main():
    max_divisors = 0
    i = 1
    tri_num = 0

    while max_divisors <= 500:
        tri_num += i
        i += 1
        n_divisors = get_divisors(tri_num)
        if n_divisors > max_divisors:
            max_divisors = n_divisors
        print(f"{tri_num} has {n_divisors} divisors")
    
    print(f"Triangular number {tri_num} has {n_divisors} divisors")


if __name__ == '__main__':
    main()
